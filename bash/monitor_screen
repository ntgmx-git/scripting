#!/bin/bash
# VERSION=1.0
# Two columns are present, on the left some not often actualized data and often actualized data on the right. 
# TODO

trap 'cleanup' SIGINT
TRASH=""
function cleanup(){
	for file in $TRASH; do  rm $file; done
	pkill r_listener
	exit 0
}

### tput_section 
# function that really wrap the content of one input into one "section". Avoid the EOL return of classical inputs below a "tput cup" call.
# Arg1: starting row
# Arg2: starting column
# Arg3: Title of the section
function tput_section(){
	start_r="$1"
	start_c="$2"
	section_title="$3"

	n_title=$(echo "$section_title" | wc -c)
	n_equ=$(( $(( $(tput cols) / 4 )) - $n_title ))
	equ=""
	full_line=""
	for i in $(seq 1 $n_equ); do equ="${equ}="; done

	i=1
	tput cup $start_r $start_c
	echo "$equ ${section_title} $equ"
	while IFS= read -r line; do
		tput cup $(( $start_r + $i )) $start_c
		echo "$line " 
		i=$(( $i + 1 ))
	done
}


function clear_tput_right(){
	start_c="$(( $(tput cols) / 2 ))"
	for i in $(seq 1 $(tput lines)); do tput cup $i $start_c && tput el ; done
}

function main(){
	tput clear
	temp_ram=$(mktemp) && TRASH="$(echo $temp_ram) $TRASH"
	temp_net=$(mktemp) && TRASH="$(echo $temp_net) $TRASH"
	temp_disk=$(mktemp)&& TRASH="$(echo $temp_disk) $TRASH"
	temp_cpu=$(mktemp) && TRASH="$(echo $temp_cpu) $TRASH"
	temp_users_connected=$(mktemp) && TRASH="$(echo $temp_users_connected) $TRASH"
	temp_journalctl=$(mktemp) && TRASH="$(echo $temp_journalctl) $TRASH"
	temp_sshd_fail2ban=$(mktemp) && TRASH="$(echo $temp_sshd_fail2ban) $TRASH"

	left_timestamp=0
	while true; do
		if [[ "$left_timestamp" == "3" ]]; then
			tput clear
			left_timestamp=0
		else
			clear_tput_right
		fi

		left_timestamp=$(( left_timestamp + 1))
		# Rows and cols, but actualizing them in case of change in screen dims.
		ROWS=$(tput lines)
		COLS=$(tput cols)
		MIDC=$(( $COLS / 2 ))
		MIDR=$(( $ROWS / 2 ))

		# Part Top left 
		df -hi | head -n 1 > "$temp_disk" # first line inodes
		df -hi | grep "^/dev/" >> "$temp_disk" # disk inodes
		echo " " >> "$temp_disk" # separation
		df -h | head -n 1 >> "$temp_disk" # header storage
		df -h | grep "^/dev/" >> "$temp_disk" # disk storage 
		cat $temp_disk | tput_section 0 0 "DISK USAGE" # DISPLAY
		
		# Part 2 left 
		middle_lstart=$(( $(wc -l < "$temp_disk") + 2 ))	
		last --ip | head -n 10 | cut -c 1-$MIDC > "$temp_users_connected"
		cat $temp_users_connected | tput_section $middle_lstart 0 "LAST LOGIN" # DISPLAY

		# Part 3 left 
		# Remove this section if you do not want to sudo
		users_connected_lines=$(wc -l < "$temp_users_connected")
		fail2ban_start=$(( user_connected_lines + middle_lstart + 12 ))
		sudo fail2ban-client status sshd > "$temp_sshd_fail2ban"
		cat $temp_sshd_fail2ban | tput_section $fail2ban_start 0 "fail2ban sshd" # DISPLAY


		# Top right 
		top -bn1 | grep "Cpu(s" | awk '{print "CPU:" $2 + $4 "%"}' > "$temp_cpu"
		middle_right=$(( $(cat $temp_cpu | wc -l) + 2 )) 
		cat $temp_cpu | tput_section 0 $MIDC "CPU USAGE" 

		# Middle right
		free -h > "$temp_ram" # RAM
		cat /proc/net/dev | tail -n +3 | awk '{printf "%s RX: %.2f KiB TX: %.2f KiB\n", $1, $2/1024, $10/1024}' > "$temp_net"
		cat $temp_ram | tput_section $middle_right $MIDC "RAM USAGE" # always 3 lines
		cat $temp_net | tput_section $(( $middle_right + 5 )) $MIDC "NET" # Not that clean but hey..

		# Bottom right 	
		bottom_right=$(( $(cat $temp_ram | wc -l) + $(cat $temp_net | wc -l) + 4 ))
		journalctl --no-pager -o short -ke --no-full --no-hostname | cut -c 8-$MIDC | tail -n 10 > "$temp_journalctl"
		cat $temp_journalctl | tput_section $bottom_right $MIDC "JOURNAL"	

		sleep 3
	done
}
main

